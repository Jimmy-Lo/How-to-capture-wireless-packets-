package org.pcap4j.sample;

import java.io.EOFException;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.TimeoutException;
import org.pcap4j.core.NotOpenException;
import org.pcap4j.core.PcapHandle;
import org.pcap4j.core.PcapHandle.TimestampPrecision;
import org.pcap4j.core.PcapNativeException;
import org.pcap4j.core.Pcaps;
import org.pcap4j.packet.Packet;

@SuppressWarnings("javadoc")
public class From802_11ac {

	public PacketInformation GetPacketInformation( Packet packet ) {
		
		
		
			
			int m = 0; //count variable
			
			try {
				Packet packet = handle.getNextPacketEx(); // get the packet.
				byte[] rd = packet.getRawData(); // get the raw Data and put it in bt.
				String FCF = "0"; // frame control field
				double rate = 0;
				int l = packet.length();
				String timestamp = handle.getTimestamp().toString();
				String str1 = "N", str2 = "N", str3 = "N"; // addresses

				try {
					/*
 					//for sigcom08 packets, to get the packet length and data rate
					int l = 0;
					str1 = String.valueOf(toHexString(rd[140 + 3]))
								.concat(String.valueOf(toHexString(rd[140 + 2])))
								.concat(String.valueOf(toHexString(rd[140 + 1])))
								.concat(String.valueOf(toHexString(rd[140])));
					l = Integer.valueOf(str1, 16);
					double t = Integer.valueOf(toHexString(rd[116]), 16);
					rate = t / 2;

	*/				
					  
					// get the data rate 
					// for 802.11 a & g. 
					if  (packet.getHeader() != null) { 
						try { 
							rate = packet.getHeader().getDataRate(); 
							m=1;
						} catch (Exception e) {
							rate = 0; 
						} 
						
					}
					  
	/*				  
					// for 802.11 n
					if (rate == 0) { 
						String[] rateSeg1 = new String[2]; 
						for (int q = 0; q < 2; q++) {
							rateSeg1[q] = toHexString(rd[11 + q]); 
						} 
						String[] rateSeg2 = new String[2]; 
						for (int q = 0; q < 2; q++) {
							rateSeg2[q] = toHexString(rd[26 + q]); 
						}
						char ch1 = rateSeg1[1].toCharArray()[1],ch2 = rateSeg2[1].toCharArray()[1];
						String s1 = String.valueOf(ch1), s2 = String.valueOf(ch2);
					  
						if ((rateSeg1[0].equals("07")) && (s1.equals("4"))) {
							switch (rd[13]) { 
					  			case 0: rate = 7.2;break;case 1: rate = 14.4;break;case 2: rate = 21.7;break;case 3: rate = 28.9;break;
					  			case 4: rate = 43.3;break;case 5: rate = 57.8;break;case 6: rate = 65;break;case 7: rate = 72.2;break; 
					  			case 8: rate = 14.4;break;case 9: rate = 28.9;break;case 10: rate = 43.3;break;case 11: rate = 57.8;break; 
					  			case 12: rate = 86.7;break;case 13: rate = 115.6;break;case 14: rate = 130;break;case 15: rate = 144.4;break;
					  			case 16: rate = 21.7;break;case 17: rate = 43.3;break;case 18: rate = 65;break;case 19: rate = 86.7;break;
					  			case 20: rate = 130;break;case 21: rate = 173.3;break;case 22: rate = 195;break;case 23: rate = 216.7;break; 
					  			case 24: rate = 28.9;break;case 25: rate = 57.8;break;case 26: rate = 86.7;break;case 27: rate = 115.6;break; 
					  			case 28: rate = 173.3;break;case 29: rate = 231.1;break;case 30: rate = 260;break;case 31: rate = 288.9;break; 
							} 
							m = 0; 
						}
						if ((rateSeg1[0].equals("07")) && (s1.equals("0"))) { 
							switch (rd[13]) { 
						 		case 0: rate = 6.5;break;case 1: rate = 13;break;case 2: rate = 19.5;break;case 3: rate = 26;break;
						 		case 4: rate = 39;break;case 5: rate = 52;break;case 6: rate = 58.5;break;case 7: rate = 65;break; 
						 		case 8: rate = 13;break;case 9: rate = 26;break;case 10: rate = 39;break;case 11: rate = 52;break; 
						 		case 12: rate = 78;break;case 13: rate = 104;break;case 14: rate = 117;break;case 15: rate = 130;break; 
						 		case 16: rate = 19.5;break;case 17: rate = 39;break;case 18: rate = 58.5;break;case 19: rate = 78;break;
						 		case 20: rate = 117;break;case 21: rate = 156;break;case 22: rate = 175.5;break;case 23: rate = 195;break; 
						 		case 24: rate = 26;break;case 25: rate = 52;break;case 26: rate = 78;break;case 27: rate = 104;break; 
						 		case 28: rate = 156;break;case 29: rate = 208;break;case 30: rate = 234;break;case 31: rate = 260;break;
							}
							m = 0;
						}
					  
						if ((rateSeg2[0].equals("37")) && (s2.equals("0"))) {
							switch (rd[28]) 
								{ case 0: rate = 6.5;break;case 1: rate = 13;break;case 2: rate = 19.5;break;
								case 3: rate = 26;break; case 4: rate = 39;break;case 5: rate = 52;break;case 6: rate = 58.5;break;
								case 7: rate = 65;break; case 8: rate = 13;break;case 9: rate = 26;break;case 10: rate = 39;break;
								case 11: rate = 52;break; case 12: rate = 78;break;case 13: rate = 104;break;case 14: rate = 117;break;
								case 15: rate = 130;break; case 16: rate = 19.5;break;case 17: rate = 39;break;case 18: rate = 58.5;break;
								case 19: rate = 78;break; case 20: rate = 117;break;case 21: rate = 156;break;case 22: rate = 175.5;break;
								case 23: rate = 195;break; case 24: rate = 26;break;case 25: rate = 52;break;case 26: rate = 78;break;
								case 27: rate = 104;break; case 28: rate = 156;break;case 29: rate = 208;break;case 30: rate = 234;break;
								case 31: rate = 260;break;
							}
							m = 1; 
						}
					  
					    if ((rateSeg2[0].equals("37")) && (s2.equals("4"))) {
							switch (rd[28]) { 
						  		case 0: rate = 7.2;break;case 1: rate = 14.4;break;case 2: rate = 21.7;break;case 3: rate = 28.9;break;
				  				case 4: rate = 43.3;break;case 5: rate = 57.8;break;case 6: rate = 65;break;case 7: rate = 72.2;break; 
				  				case 8: rate = 14.4;break;case 9: rate = 28.9;break;case 10: rate = 43.3;break;case 11: rate = 57.8;break; 
				  				case 12: rate = 86.7;break;case 13: rate = 115.6;break;case 14: rate = 130;break;case 15: rate = 144.4;break;
				  				case 16: rate = 21.7;break;case 17: rate = 43.3;break;case 18: rate = 65;break;case 19: rate = 86.7;break;
				  				case 20: rate = 130;break;case 21: rate = 173.3;break;case 22: rate = 195;break;case 23: rate = 216.7;break; 
				  				case 24: rate = 28.9;break;case 25: rate = 57.8;break;case 26: rate = 86.7;break;case 27: rate = 115.6;break; 
				  				case 28: rate = 173.3;break;case 29: rate = 231.1;break;case 30: rate = 260;break;case 31: rate = 288.9;break; 
							} 
							m = 0; 
						}
					  
					  
					}
					  
					  
*/
			        //for 802.11ac 
			        if (m==0) { 
				 		String[] rateSeg1 = new String[3];
				 		String BF1 = .valueOf(toHexString(rd[13]).toCharArray()[1]);  
						for (int q = 0; q < 3; q++) { 
							rateSeg1[q] = toHexString(rd[14 + q]);
						} 
						String[] rateSeg2 = new String[3];
						String BF2 = .valueOf(toHexString(rd[37]).toCharArray()[1]);
						for (int q = 0; q < 3; q++) { 
							rateSeg2[q] = toHexString(rd[38 + q]); 
						} 
						String[] rateSeg3 = new String[3];
						String BF3 = .valueOf(toHexString(rd[27]).toCharArray()[1]); 
						for (int q = 0; q < 3; q++) {
							rateSeg3[q] = toHexString(rd[28 + q]);
						} 
						String s1 = .valueOf(rateSeg1[2].toCharArray()[0]),
							   s2 = .valueOf(rateSeg2[2].toCharArray()[0]), 
							   s3 = .valueOf(rateSeg3[2].toCharArray()[0]), 
						       s4 = .valueOf(rateSeg2[0].toCharArray()[1]);		
						
						if ((rateSeg1[0].equals("00")) && (rateSeg1[1].equals("04"))) { 
							switch (Byte.valueOf(s1)) {
								case 0: rate = 58.5;break;case 1: rate = 117;break;case 2: rate = 175.5;break;
								case 3: rate = 234;break; case 4: rate = 351;break;case 5: rate = 468;break;
								case 6: rate = 526.5;break;case 7: rate = 585;break; case 8: rate =	702;break;
								case 9: rate = 780;break;
							} 
					/*		if (BF1.equals("0"))
								l = 1; 
							else 
								l = 0;
							m =Integer.valueOf(s1,16);
					*/		
							// get the source and destination address segment 
							int offset = 28; // 28 for 802.11ac, the offset of the address to the first hex data.
							String[] bt = new String[18];
							if (rd.length <= offset + 12 && rd.length > offset + 6) {
								for (int q = 0; q < 6; q++) { 
									bt[q] = toHexString(rd[offset + q]);
								} 
							} else if (rd.length < offset + 18 && rd.length > offset + 12) {
								for (int q = 0; q < 12; q++) {
									bt[q] = toHexString(rd[offset + q]);
								} 
							} else if (rd.length >=offset + 18) {
								for (int q = 0; q < 18; q++) { 
									bt[q] = toHexString(rd[offset + q]);
								} 
							}
						
							if (bt.length < 12) { // deal with abnormal packets.
								for(int k = 0; k < 6; k++) { 
									str1 = str1.concat(bt[k]);
								} 
							} 
							if (bt.length < 18) { // deal with abnormal packets.
								for (int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]); 
									str2 = str2.concat(bt[6 +k]);
								}
							} else { // normal packets
								for (int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]); 
									str2 = str2.concat( bt[6 + k]); 
									str3 = str3.concat( bt[12 + k]);
								}
							}
							  
					    	str1 = str1.substring(1, str1.length());
					    	str2 = str2.substring(1, str2.length()); 
					    	str3 = str3.substring(1, str3.length());
					    	
						}
						if((rateSeg1[0].equals("04")) && (rateSeg1[1].equals("04"))) { 
							switch (Byte.valueOf(s1)) {
								case 0: rate = 65;break;case 1: rate = 130;break;case 2: rate = 195;break;
								case 3: rate = 260;break; case 4: rate = 390;break;case 5: rate = 520;break;
								case 6: rate = 585;break;case 7: rate = 650;break; case 8: rate = 780;break;
								case 9: rate = 866.7;break; 
							} 
					/*		if (BF1.equals("0")) 
								l = 1; 
							else
								l = 0;
							m =Integer.valueOf(s1,16);
					*/		
							// get the source and destination address segment 
							int offset = 28; // 28 for 802.11ac, the offset of the address to the first hex data.
							String[] bt = new String[18];
							if (rd.length <= offset + 12 && rd.length > offset + 6) {
								for (int q = 0; q < 6; q++) { 
									bt[q] = toHexString(rd[offset + q]);
								} 
							} else if (rd.length < offset + 18 && rd.length > offset + 12) {
								for (int q = 0; q < 12; q++) {
									bt[q] = toHexString(rd[offset + q]);
								} 
							} else if (rd.length >=offset + 18) {
								for (int q = 0; q < 18; q++) { 
									bt[q] = toHexString(rd[offset + q]);
								} 
							}
						
							if (bt.length < 12) { // deal with abnormal packets.
								for(int k = 0; k < 6; k++) { 
									str1 = str1.concat(bt[k]);
								} 
							} 
							if (bt.length < 18) { // deal with abnormal packets.
								for (int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]); 
									str2 = str2.concat( bt[6 +k]);
								}
							} else { // normal packets
								for (int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]); 
									str2 = str2.concat( bt[6 + k]); 
									str3 = str3.concat(  bt[12 + k]);
								}
							}
							  
					    	str1 = str1.substring(1, str1.length());
					    	str2 = str2.substring(1, str2.length()); 
					    	str3 = str3.substring(1, str3.length());
						}
						if((rateSeg3[0].equals("04")) && (rateSeg3[1].equals("04"))) {
							switch (Byte.valueOf(s3)) {
								case 0: rate = 65;break;case 1: rate = 130;break;case 2: rate = 195;break;
								case 3: rate = 260;break; case 4: rate = 390;break;case 5: rate = 520;break;
								case 6: rate = 585;break;case 7: rate = 650;break; case 8: rate = 780;break;
								case 9: rate = 866.7;break;
							}
					/*		if (BF3.equals("0")) 
								l = 1; 
							else 
								l = 0;
							m =Integer.valueOf(s3,16);
					*/		
							// get the source and destination address segment 
							int offset = 56; // 28 for 802.11ac, the offset of the address to the first hex data.
							String[] bt = new String[18];
							if (rd.length <= offset + 12 && rd.length > offset + 6) {
								for (int q = 0; q < 6; q++) { 
									bt[q] = toHexString(rd[offset + q]);
								} 
							} else if (rd.length < offset + 18 && rd.length > offset + 12) {
								for (int q = 0; q < 12; q++) {
									bt[q] = toHexString(rd[offset + q]);
								} 
							} else if (rd.length >=offset + 18) {
								for (int q = 0; q < 18; q++) { 
									bt[q] = toHexString(rd[offset + q]);
								} 
							}
						
							if (bt.length < 12) { // deal with abnormal packets.
								for(int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]);
								} 
							} 
							if (bt.length < 18) { // deal with abnormal packets.
								for (int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]); 
									str2 = str2.concat(bt[6 +k]);
								}
							} else { // normal packets
								for (int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]); 
									str2 = str2.concat( bt[6 + k]); 
									str3 = str3.concat( bt[12 + k]);
								}
							}
							  
					    	str1 = str1.substring(1, str1.length());
					    	str2 = str2.substring(1, str2.length()); 
					    	str3 = str3.substring(1, str3.length());
						}
						if ((s4.equals("4")) && (rateSeg2[1].equals("04"))) {
							switch (Byte.valueOf(s2)) { 
								case 0: rate = 65;break;case 1: rate = 130;break;case 2: rate = 195;break;
								case 3: rate = 260;break; case 4: rate = 390;break;case 5: rate = 520;break;
								case 6: rate = 585;break;case 7: rate = 650;break; case 8: rate = 780;break;
								case 9: rate = 866.7;break; 
							} 
				/*			if (BF2.equals("0")) 
								l = 1;
							else
					  			l = 0;
							m =Integer.valueOf(s2,16);
				*/			
							// get the source and destination address segment 
							int offset = 56; // 28 for 802.11ac, the offset of the address to the first hex data.
							String[] bt = new String[18];
							if (rd.length <= offset + 12 && rd.length > offset + 6) {
								for (int q = 0; q < 6; q++) { 
									bt[q] = toHexString(rd[offset + q]);
								} 
							} else if (rd.length < offset + 18 && rd.length > offset + 12) {
								for (int q = 0; q < 12; q++) {
									bt[q] = toHexString(rd[offset + q]);
								} 
							} else if (rd.length >=offset + 18) {
								for (int q = 0; q < 18; q++) { 
									bt[q] = toHexString(rd[offset + q]);
								} 
							}
						
							if (bt.length < 12) { // deal with abnormal packets.
								for(int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]);
								} 
							} 
							if (bt.length < 18) { // deal with abnormal packets.
								for (int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]); 
									str2 = str2.concat( bt[6 +k]);
								}
							} else { // normal packets
								for (int k = 0; k < 6; k++) { 
									str1 = str1.concat( bt[k]); 
									str2 = str2.concat( bt[6 + k]); 
									str3 = str3.concat( bt[12 + k]);
								}
							}
							  
					    	str1 = str1.substring(1, str1.length());
					    	str2 = str2.substring(1, str2.length()); 
					    	str3 = str3.substring(1, str3.length());
							
						}
					  
		 			}
			        
/*			        if (l == 1) 
			        	 x++;		        
			        else if(l == 0)
			        	 y++;
		        	System.out.println("x="+ x);		        
		        	System.out.println("y="+ y);		        

				 
					// if not
					if (m == 1) {
						for(int k = 0; k< 58; k++) {
							FCF = FCF.concat(toHexString(rd[k]));
						}
					}
					if (m == 2) {
						for(int k = 0; k< 58; k++) {
							FCF = FCF.concat(toHexString(rd[k]));
						}
					}
					if (m == 3) {
						for(int k = 0; k< 86; k++) {
							FCF = FCF.concat(toHexString(rd[k]));
						}
					}
					if (m ==0) {
						p++;
						System.out.println(p);
					}

					
		 			// get the source and destination address segment 
					int offset = 148; // 28 for 802.11ac, the offset of the address to the first hex data.
					String[] bt = new String[18];
					if (rd.length <= offset + 12 && rd.length > offset + 6) {
						for (int q = 0; q < 6; q++) { 
							bt[q] = toHexString(rd[offset + q]);
						} 
					} else if (rd.length < offset + 18 && rd.length > offset + 12) {
						for (int q = 0; q < 12; q++) {
							bt[q] = toHexString(rd[offset + q]);
						} 
					} else if (rd.length >=offset + 18) {
						for (int q = 0; q < 18; q++) { 
							bt[q] = toHexString(rd[offset + q]);
						} 
					}
				
					if (bt.length < 12) { // deal with abnormal packets.
						for(int k = 0; k < 6; k++) { 
							str1 = str1.concat(":" + bt[k]);
						} 
					} 
					if (bt.length < 18) { // deal with abnormal packets.
						for (int k = 0; k < 6; k++) { 
							str1 = str1.concat(":" + bt[k]); 
							str2 = str2.concat(":" + bt[6 +k]);
						}
					} else { // normal packets
						for (int k = 0; k < 6; k++) { 
							str1 = str1.concat(":" + bt[k]); 
							str2 = str2.concat(":" + bt[6 + k]); 
							str3 = str3.concat(":" +  bt[12 + k]);
						}
					}
					  
			    	str1 = str1.substring(1, str1.length());
			    	str2 = str2.substring(1, str2.length()); 
			    	str3 = str3.substring(1, str3.length());
					  
					 
					// output

					// get the Frame Control Field.
					// if (rd.length > 145) {
					// FCF = toHexString(rd[52]);
					// FCF.concat(toHexString(rd[53]));
					
*/				
					if (rate == 0) {}
					else 
						WriteFile(fw, str1, str2, str3, l, timestamp, rate, FCF);
					


				} catch (IOException iox) {
					iox.printStackTrace();
				}
			} catch (EOFException e) {
				System.out.println("EOF");
				break;
			}
		}

		fw.close();handle.close();

	}

	/**
	 * write the information to the .txt file.
	 * 
	 * @param fw
	 * @param str1
	 * @param str2
	 * @param l
	 * @param timestamp
	 * @param rate
	 * @throws IOException
	 */
	public static void WriteFile(FileWriter fw, String str1, String str2, String str3, int l, String timestamp,
			double rate, String FCF) throws IOException {
		fw.append(str1);
		fw.append(",");
		fw.append(str2);
		fw.append(",");
		fw.append(str3);
		fw.append(",");
		fw.append(.valueOf(l));
		fw.append(",");
		fw.append(timestamp);
		fw.append(",");
		fw.append(.valueOf(rate));
		fw.append(",");
		fw.append(FCF);
		fw.append("\n");
	}

	/**
	 * turn byte to hexString
	 * 
	 * @param str
	 * @return
	 */
	public static String toHexString(byte str) {
		String s = Integer.toHexString(Integer.valueOf(str));
		char[] c = s.toCharArray();
		String r;
		if (c.length > 1) {
			r = .valueOf(c[c.length - 2]).concat(.valueOf(c[c.length - 1]));
		} else if (!c.equals('0')) {
			r = "0".concat(.valueOf(c[c.length - 1]));
		} else
			r = "00";
		return r;
	}
}
