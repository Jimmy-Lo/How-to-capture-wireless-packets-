package org.pcap4j.sample;

import java.io.EOFException;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeoutException;
import org.pcap4j.core.NotOpenException;
import org.pcap4j.core.PcapHandle;
import org.pcap4j.core.PcapHandle.TimestampPrecision;
import org.pcap4j.core.PcapNativeException;
import org.pcap4j.core.Pcaps;
import org.pcap4j.packet.Packet;

@SuppressWarnings("javadoc")
public class ReadPacketFile {

  private static final int COUNT = 300000000;

  private static final String PCAP_FILE_KEY
    = ReadPacketFile.class.getName() + ".pcapFile";
  private static final String PCAP_FILE
    = System.getProperty(PCAP_FILE_KEY,"C:/Users/luo_z/Google Drive/Hall_normal.pcap");

  private ReadPacketFile() {}

  public static void main(String[] args) throws PcapNativeException, NotOpenException, IOException {
    PcapHandle handle;
    try {
      handle = Pcaps.openOffline(PCAP_FILE, TimestampPrecision.NANO);
    } catch (PcapNativeException e) {
      handle = Pcaps.openOffline(PCAP_FILE);
    }

    File newTextFile = new File("C:/Wireless-Packets-Analysis/matlab_based_analysis/networkData.txt");
	FileWriter fw = new FileWriter(newTextFile);
	
	
	
	
    for (int i = 0; i < COUNT; i++) {
      try {
        Packet packet = handle.getNextPacketEx();  
        
        try {
        	int l = packet.length();
			String timestamp = handle.getTimestamp().toString();		
	
			byte[] rd = packet.getRawData();		
    		String[] bt = new String[12];
    		if (rd.length<45) {
    			for (int q = 0;q < 6;q++) {      			 
    				bt[q] = toHexString(rd[28+q]);
    			}
    		}
			else
				for (int q = 0;q < 12;q++) {	   			 
    				bt[q] = toHexString(rd[28+q]);
				}

        	if (packet.getHeader() != null) {                       		
        		int rate = 0;  
        		try{
            		rate = packet.getHeader().getDataRate();
        		} catch (Exception e) {
        			rate = 0;
        		}
        		
        		if (rd.length< 45) {
        			String str1 = "",str2 = "broadcast";
        			for (int k = 0; k < 6; k++) {
        				str1 = str1.concat(":"+bt[k]);
        			}
    				str1 = str1.substring(1,str1.length());
        			WriteFile(fw,str1,str2,l,timestamp,rate);
        		}
        		
        		else {
        			String str1 = "",str2 = "";
        			for (int k = 0; k < 6; k++) {
        				str1 = str1.concat(":"+bt[k]);
        				str2 = str2.concat(":"+bt[6+k]);
        			}
    				str1 = str1.substring(1,str1.length());
    				str2 = str2.substring(1,str2.length());
        			WriteFile(fw,str1,str2,l,timestamp,rate);
        		}
        	}
        	
        	else {                                           		
        		String str1 = "",str2 = "";
        		for (int k = 0; k < 6; k++) {
    				str1 = str1.concat(":"+bt[k]);
    				str2 = str2.concat(":"+bt[6+k]);
    			}
				str1 = str1.substring(1,str1.length());
				str2 = str2.substring(1,str2.length());
        		int rate = 0;
    			WriteFile(fw,str1,str2,l,timestamp,rate);                                  
        	}
        	
        	
        	
        	
        } catch (IOException iox) {
        	iox.printStackTrace();
        }
        
      } catch (TimeoutException e) {
    	  
      } catch (EOFException e) {
        System.out.println("EOF");
        break;
      }

    }
  
  	fw.close();
    handle.close();
    
  }

  
  
  public static void WriteFile (FileWriter fw, String str1, String str2, int l, String timestamp, int rate) throws IOException {
	  fw.append(str1);
	  fw.append(",");
	  fw.append(str2);
	  fw.append(",");
	  fw.append(String.valueOf(l));
	  fw.append(","); 			
	  fw.append(timestamp);
	  fw.append(",");
	  fw.append(String.valueOf(rate));      			
	  fw.append("\n");  
  }
  
  
  public static String toHexString (byte str) {
	  String s = Integer.toHexString(Integer.valueOf(str));
	  char[] c = s.toCharArray();
	  String r;
	  if (c.length> 1) {
		   r = String.valueOf(c[c.length-2]).concat(String.valueOf(c[c.length-1]));
	  }
	  else 
		   r = String.valueOf(c[c.length-1]).concat("0");
	  return r;	  
  }
}
